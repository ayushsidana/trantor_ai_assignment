import logging
import backoff
from httpx import AsyncClient, HTTPError
from trantor_ai_assignment.settings import OPENAI_API_KEY, OPENAI_ENDPOINT

# Initialize logging configuration
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@backoff.on_exception(backoff.expo, HTTPError, max_time=60)
async def get_openai_response(question: str) -> str:
    """
    Retrieve a response from the OpenAI GPT-3.5 Turbo engine for a given question.

    Args:
        question (str): The prompt or question for which you want a response from GPT-3.5 Turbo.

    Returns:
        str: A response generated by GPT-3.5 Turbo based on the provided question.

    Raises:
        ValueError: If there's an 'Unauthorized' error with the OpenAI API key.
        HTTPError: If there's any other HTTP-related error encountered while communicating with the OpenAI API.
        Exception: For any other unexpected errors.

    Notes:
        This function uses an exponential backoff decorator to handle transient failures
        when making requests to the OpenAI API. The maximum retry time is set to 60 seconds.
    """
    try:
        async with AsyncClient() as client:
            response = await client.post(
                OPENAI_ENDPOINT,
                headers={"Authorization": f"Bearer {OPENAI_API_KEY}"},
                json={"prompt": question, "max_tokens": 150}
            )
            response.raise_for_status()
            return response.json()["choices"][0]["text"].strip()
    except HTTPError as e:
        if e.response.status_code == 401:
            logger.error("Unauthorized: Invalid or expired API key. Please check your OpenAI API key.")
            raise ValueError("Unauthorized: Invalid or expired API key. Please check your OpenAI API key.")
        else:
            logger.error(f"HTTPError while fetching response from OpenAI for question: {question}. Error: {e}")
            raise e
    except Exception as e:
        logger.error(f"Error while fetching response from OpenAI for question: {question}. Error: {e}")
        raise e
